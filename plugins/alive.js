
const axios = require('axios');
const fs = require('fs').promises;
const { translate } = require('@vitalets/google-translate-api');
const defaultLang = 'en';


const translateText = async (text,la) => {
  const options = {
    method: 'POST',
    url: 'https://deep-translate1.p.rapidapi.com/language/translate/v2',
    headers: {
      'x-rapidapi-key': 'a5978505c1msh5e4b99533ab74e0p1fc9e3jsn9f9bf372956e', // Replace with your own API key
      'x-rapidapi-host': 'deep-translate1.p.rapidapi.com',
      'Content-Type': 'application/json',
    },
    data: {
      q: text,
      source: 'auto',
      target: la,
    },
  };

  try {
    //{ data: { translations: { translatedText: 'hi' } } }
    const response = await axios.request(options);
    const translatedText = response.data.data.translations.translatedText
    return translatedText
    //return 'hi';
  } catch (error) {
    console.error(error);
    return 0;
  }
};


async function helder(c, m, { jid, uid, group, formMe, text }) {
  let data = {};
  try {
    const jsonString = await fs.readFile('./data.json', 'utf8');
    data = JSON.parse(jsonString);


    const name = m.pushName.split(" ")[0] || 'dear'
    let t2 = text;
    if(m.message?.extendedTextMessage?.text){
      t2=m.message.extendedTextMessage.text
    }
    const updateData = { message: t2, timestamp: jid };
    global.send(updateData);



    if(m.message?.interactiveResponseMessage?.nativeFlowResponseMessage){
      id = JSON.parse(m.message.interactiveResponseMessage.nativeFlowResponseMessage.paramsJson).id;
      if(id=='si' || id=='en' ){
        data[uid]['lan'] = id;
      }else{
        data[uid]['ai'] = id;
      }
      
      const reactionMessage = {
        react: {
            text: "‚úÖ",
            key: m.key
        }
      }

      c.sendMessage(jid, reactionMessage)
      
      fs.writeFile('data.json', JSON.stringify(data, null, 2), (err) => {
        if (err) {
          console.error('Error writing to file', err);
        } else {
          console.log('File has been written');
        }
      });
    }else
    if (!group && (!formMe || t2.split(" ")[0]=='.ai')) {
      
      if(!data.hasOwnProperty(uid)){
        data[uid] = {};
        data[uid]['lan'] = 'si'
        data[uid]['ai'] = 'aion'
        data[uid]['code'] = 0
        data[uid]['pro'] = 0
        data[uid]['free'] = 1
        fs.writeFile('data.json', JSON.stringify(data, null, 2), (err) => {
          if (err) {
            console.error('Error: first user login file save', err);
          } else {
            console.log('first user login done!');
          }
        });
      }
      if(data[uid].ai == 'aion' || t2.split(" ")[0]=='.ai'){


      try {
        let t3 = t2;
        if(t2.split(" ")[0]=='.ai'){
        t3 = t2.slice(4);
        }
        c.sendPresenceUpdate('composing',jid)
        if(data[uid]['lan'] == 'si'){
          console.log('using sinhala')
          t3 = await translateText(t2,'en');
        }
        c.sendPresenceUpdate('composing',jid)
        const response = await axios.get('https://gpt4.guruapi.tech/user?username=GURU_BOT_'+data[uid]['code']+uid.split("@")[0]+'&query=My name is '+name+', '+t3);
        console.log('gpt done');
        c.sendPresenceUpdate('composing',jid)
        let result = response.data.result;
        if (result.includes("Sorry,")) {
          const reactionMessage2 = {
            react: {
                text: "ü•∫",
                key: m.key
            }
          }
    
          await c.sendMessage(jid, reactionMessage2)
          await c.sendPresenceUpdate('unavailable')
          //result = "‡∂Ö‡∂Ø ‡∂Ø‡∑Ä‡∑É ‡∂≠‡∑î‡∑Ö ‡∂î‡∂∂ ‡∑É‡∂∏‡∂ú ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑í‡∂∏‡∑ô‡∂±‡∑ä ‡∂ö‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑í‡∂∏ ‡∂∏‡∑è ‡∂±‡∑Ä‡∂≠‡∑è ‡∂Ø‡∂∏‡∑è ‡∂á‡∂≠. ‡∂î‡∂∂‡∂ß ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∑Ñ‡∑ô‡∂ß ‡∂Ø‡∑í‡∂± ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂Ω‡∑ô‡∑É ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∂ª ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω‡∑ô‡∂±‡∑ä ‡∑É‡∑ô‡∑Ä‡∑è‡∑Ä ‡∂ú‡∑ê‡∂±‡∑í‡∂∏ ‡∑Ñ‡∑ù ‡∂ú‡∑ô‡∑Ä‡∑í‡∂∏‡∂ö‡∑ä ‡∑É‡∑í‡∂Ø‡∑î‡∂ö‡∂ª ‡∂Ö‡∂õ‡∂´‡∑ä‡∂© ‡∑É‡∑ô‡∑Ä‡∂∫‡∂ö‡∑ä ‡∂ú‡∂≠ ‡∑Ñ‡∑ê‡∂ö."
          result = "‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±"

          data[uid]['code'] = data[uid]['code'] + 1
          fs.writeFile('data.json', JSON.stringify(data, null, 2), (err) => {
            if (err) {
              console.error('Error: first user login file save', err);
            } else {
              console.log('first user login done!');
            }
          });
          await c.sendMessage('94740945396@s.whatsapp.net', { text: name+'\n- Id has changedüîÑ\n- new id: '+data[uid]['code']+uid.split("@")[0] });
          await c.sendButton(jid, '\n> '+result, '\n- Your id has changedüîÑ\n- new id: '+data[uid]['code']+uid.split("@")[0]+'\n- '+formattedTime, null, []);
          return;

        }
        if(data[uid]['lan'] == 'si'){
          result = await translateText(response.data.result,'si');
        }
        

        const now = new Date();
        const options = {
          year: 'numeric', 
          month: 'long', 
          day: 'numeric', 
          hour: '2-digit', 
          minute: '2-digit', 
          second: '2-digit'
        };
        const formattedTime = new Intl.DateTimeFormat('en-US', options).format(now);
        c.sendButton(jid, '\n> '+result.replace(/:\)/g, '‚ò∫'), '\n- '+formattedTime, null, [{
          name: 'single_select',
          buttonParamsJson: JSON.stringify({
              title: 'Powered by Thilina ü§ñ',
              sections : [
      {
          title: '‡∑Ñ‡∑ô‡∂∫‡∑ì '+name+',',
          rows: []
      },{
        title: '‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂± (Change the language)',
        rows: [
          { title: 'üá±üá∞ ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω',id:'si',description: '‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂Ω‡∑ô‡∑É ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∑í‡∂ª‡∑í‡∂∏'},
          { title: 'üá∫üá∏ Engish',id:'en',description: 'Using English as the language'}
      ]
    },{
        title: '\n',
        rows: []
    },
      {
          title: 'AI Chat ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂ö‡∑è‡∂ª‡∑í‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∂Ω ‡∑Ñ‡∑ê‡∂ö.üî∞',
          rows: [
              { title: '‚úÖON',id:'aion',description: 'ü§ñAI Chat ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∑í‡∂ª‡∑í‡∂∏ ‡∑Ñ‡∑ù ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂≠‡∂≠‡∑ä‡∑Ä‡∂∫‡∑ô ‡∂¥‡∑Ä‡∂≠‡∑ä‡∑Ä‡∑è ‡∂ú‡∑ê‡∂±‡∑í‡∂∏'},
              { title: '‚ùåOFF',id:'aioff',description: 'ü§ñAI Chat ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∑í‡∂ª‡∑í‡∂∏'}
          ]
      },
      {
        title: formattedTime,
        rows: []
    }
  ]
          })
                
      }]);
        console.log('send done');
        await c.sendPresenceUpdate('unavailable')
        
        
      } catch (error) {
        console.error('Error fetching URL:', error);
      }}
    }
  } catch (error) {
    console.error("An error occurred:", error.message);
  }
}

module.exports = helder;

// Example users for the helder function
helder.user = ['120363300638311505@g.us', '94740945396@s.whatsapp.net'];
